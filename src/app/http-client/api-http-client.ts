//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

/* tslint:disable */
/* eslint-disable */
// ReSharper disable InconsistentNaming

import {
  mergeMap as _observableMergeMap,
  catchError as _observableCatch,
} from 'rxjs/operators';
import {
  Observable,
  throwError as _observableThrow,
  of as _observableOf,
} from 'rxjs';
import { Injectable, Inject, Optional, InjectionToken } from '@angular/core';
import {
  HttpClient,
  HttpHeaders,
  HttpResponse,
  HttpResponseBase,
} from '@angular/common/http';

export const API_BASE_URL = new InjectionToken<string>('API_BASE_URL');

@Injectable()
export class AuthenticationClient {
  private http: HttpClient;
  private baseUrl: string;
  protected jsonParseReviver: ((key: string, value: any) => any) | undefined =
    undefined;

  constructor(
    @Inject(HttpClient) http: HttpClient,
    @Optional() @Inject(API_BASE_URL) baseUrl?: string
  ) {
    this.http = http;
    this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : '';
  }

  /**
   * @param body (optional)
   * @return Success
   */
  login(body: AuthenticationRequest | undefined): Observable<string> {
    let url_ = this.baseUrl + '/api/Authentication/login';
    url_ = url_.replace(/[?&]$/, '');

    const content_ = JSON.stringify(body);

    let options_: any = {
      body: content_,
      observe: 'response',
      responseType: 'blob',
      headers: new HttpHeaders({
        'Content-Type': 'application/json-patch+json',
        Accept: 'text/plain',
      }),
    };

    return this.http
      .request('post', url_, options_)
      .pipe(
        _observableMergeMap((response_: any) => {
          return this.processLogin(response_);
        })
      )
      .pipe(
        _observableCatch((response_: any) => {
          if (response_ instanceof HttpResponseBase) {
            try {
              return this.processLogin(response_ as any);
            } catch (e) {
              return _observableThrow(e) as any as Observable<string>;
            }
          } else
            return _observableThrow(response_) as any as Observable<string>;
        })
      );
  }

  protected processLogin(response: HttpResponseBase): Observable<string> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse
        ? response.body
        : (response as any).error instanceof Blob
        ? (response as any).error
        : undefined;

    let _headers: any = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText: string) => {
          let result200: any = null;
          let resultData200 = _responseText === '' ? null : _responseText;
          result200 = resultData200 !== undefined ? resultData200 : <any>null;

          return _observableOf(result200);
        })
      );
    } else if (status === 400) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText: string) => {
          let result400: any = null;
          let resultData400 = _responseText === '' ? null : _responseText;
          result400 = ProblemDetails.fromJS(resultData400);
          return throwException(
            'Bad Request',
            status,
            _responseText,
            _headers,
            result400
          );
        })
      );
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText: string) => {
          return throwException(
            'An unexpected server error occurred.',
            status,
            _responseText,
            _headers
          );
        })
      );
    }
    return _observableOf(null as any);
  }

  /**
   * @param body (optional)
   * @return Success
   */
  register(body: RegisterRequest | undefined): Observable<string> {
    let url_ = this.baseUrl + '/api/Authentication/register';
    url_ = url_.replace(/[?&]$/, '');

    const content_ = JSON.stringify(body);

    let options_: any = {
      body: content_,
      observe: 'response',
      responseType: 'blob',
      headers: new HttpHeaders({
        'Content-Type': 'application/json-patch+json',
        Accept: 'text/plain',
      }),
    };

    return this.http
      .request('post', url_, options_)
      .pipe(
        _observableMergeMap((response_: any) => {
          return this.processRegister(response_);
        })
      )
      .pipe(
        _observableCatch((response_: any) => {
          if (response_ instanceof HttpResponseBase) {
            try {
              return this.processRegister(response_ as any);
            } catch (e) {
              return _observableThrow(e) as any as Observable<string>;
            }
          } else
            return _observableThrow(response_) as any as Observable<string>;
        })
      );
  }

  protected processRegister(response: HttpResponseBase): Observable<string> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse
        ? response.body
        : (response as any).error instanceof Blob
        ? (response as any).error
        : undefined;

    let _headers: any = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 201) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText: string) => {
          let result201: any = null;
          let resultData201 = _responseText === '' ? null : _responseText;
          result201 = resultData201 !== undefined ? resultData201 : <any>null;

          return _observableOf(result201);
        })
      );
    } else if (status === 400) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText: string) => {
          let result400: any = null;
          let resultData400 = _responseText === '' ? null : _responseText;
          result400 = ProblemDetails.fromJS(resultData400);
          return throwException(
            'Bad Request',
            status,
            _responseText,
            _headers,
            result400
          );
        })
      );
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText: string) => {
          return throwException(
            'An unexpected server error occurred.',
            status,
            _responseText,
            _headers
          );
        })
      );
    }
    return _observableOf(null as any);
  }
}

@Injectable()
export class ContactsClient {
  private http: HttpClient;
  private baseUrl: string;
  protected jsonParseReviver: ((key: string, value: any) => any) | undefined =
    undefined;

  constructor(
    @Inject(HttpClient) http: HttpClient,
    @Optional() @Inject(API_BASE_URL) baseUrl?: string
  ) {
    this.http = http;
    this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : '';
  }

  /**
   * @return Success
   */
  contactsGET(id: string): Observable<ContactResponse> {
    let url_ = this.baseUrl + '/api/Contacts/{id}';
    if (id === undefined || id === null)
      throw new Error("The parameter 'id' must be defined.");
    url_ = url_.replace('{id}', encodeURIComponent('' + id));
    url_ = url_.replace(/[?&]$/, '');

    let options_: any = {
      observe: 'response',
      responseType: 'blob',
      headers: new HttpHeaders({
        Accept: 'text/plain',
      }),
    };

    return this.http
      .request('get', url_, options_)
      .pipe(
        _observableMergeMap((response_: any) => {
          return this.processContactsGET(response_);
        })
      )
      .pipe(
        _observableCatch((response_: any) => {
          if (response_ instanceof HttpResponseBase) {
            try {
              return this.processContactsGET(response_ as any);
            } catch (e) {
              return _observableThrow(e) as any as Observable<ContactResponse>;
            }
          } else
            return _observableThrow(
              response_
            ) as any as Observable<ContactResponse>;
        })
      );
  }

  protected processContactsGET(
    response: HttpResponseBase
  ): Observable<ContactResponse> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse
        ? response.body
        : (response as any).error instanceof Blob
        ? (response as any).error
        : undefined;

    let _headers: any = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText: string) => {
          let result200: any = null;
          let resultData200 =
            _responseText === ''
              ? null
              : JSON.parse(_responseText, this.jsonParseReviver);
          result200 = ContactResponse.fromJS(resultData200);
          return _observableOf(result200);
        })
      );
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText: string) => {
          return throwException(
            'An unexpected server error occurred.',
            status,
            _responseText,
            _headers
          );
        })
      );
    }
    return _observableOf(null as any);
  }

  /**
   * @return Success
   */
  list(): Observable<ContactResponse[]> {
    let url_ = this.baseUrl + '/api/Contacts/list';
    url_ = url_.replace(/[?&]$/, '');

    let options_: any = {
      observe: 'response',
      responseType: 'blob',
      headers: new HttpHeaders({
        Accept: 'text/plain',
      }),
    };

    return this.http
      .request('get', url_, options_)
      .pipe(
        _observableMergeMap((response_: any) => {
          return this.processList(response_);
        })
      )
      .pipe(
        _observableCatch((response_: any) => {
          if (response_ instanceof HttpResponseBase) {
            try {
              return this.processList(response_ as any);
            } catch (e) {
              return _observableThrow(e) as any as Observable<
                ContactResponse[]
              >;
            }
          } else
            return _observableThrow(response_) as any as Observable<
              ContactResponse[]
            >;
        })
      );
  }

  protected processList(
    response: HttpResponseBase
  ): Observable<ContactResponse[]> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse
        ? response.body
        : (response as any).error instanceof Blob
        ? (response as any).error
        : undefined;

    let _headers: any = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText: string) => {
          let result200: any = null;
          let resultData200 =
            _responseText === ''
              ? null
              : JSON.parse(_responseText, this.jsonParseReviver);
          if (Array.isArray(resultData200)) {
            result200 = [] as any;
            for (let item of resultData200)
              result200!.push(ContactResponse.fromJS(item));
          } else {
            result200 = <any>null;
          }
          return _observableOf(result200);
        })
      );
    } else if (status === 401) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText: string) => {
          let result401: any = null;
          let resultData401 =
            _responseText === ''
              ? null
              : JSON.parse(_responseText, this.jsonParseReviver);
          result401 = ProblemDetails.fromJS(resultData401);
          return throwException(
            'Unauthorized',
            status,
            _responseText,
            _headers,
            result401
          );
        })
      );
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText: string) => {
          return throwException(
            'An unexpected server error occurred.',
            status,
            _responseText,
            _headers
          );
        })
      );
    }
    return _observableOf(null as any);
  }

  /**
   * @param contactId (optional)
   * @return Success
   */
  contactsDELETE(contactId: string | undefined): Observable<void> {
    let url_ = this.baseUrl + '/api/Contacts?';
    if (contactId === null)
      throw new Error("The parameter 'contactId' cannot be null.");
    else if (contactId !== undefined)
      url_ += 'contactId=' + encodeURIComponent('' + contactId) + '&';
    url_ = url_.replace(/[?&]$/, '');

    let options_: any = {
      observe: 'response',
      responseType: 'blob',
      headers: new HttpHeaders({}),
    };

    return this.http
      .request('delete', url_, options_)
      .pipe(
        _observableMergeMap((response_: any) => {
          return this.processContactsDELETE(response_);
        })
      )
      .pipe(
        _observableCatch((response_: any) => {
          if (response_ instanceof HttpResponseBase) {
            try {
              return this.processContactsDELETE(response_ as any);
            } catch (e) {
              return _observableThrow(e) as any as Observable<void>;
            }
          } else return _observableThrow(response_) as any as Observable<void>;
        })
      );
  }

  protected processContactsDELETE(
    response: HttpResponseBase
  ): Observable<void> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse
        ? response.body
        : (response as any).error instanceof Blob
        ? (response as any).error
        : undefined;

    let _headers: any = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 204) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText: string) => {
          return _observableOf(null as any);
        })
      );
    } else if (status === 400) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText: string) => {
          let result400: any = null;
          let resultData400 =
            _responseText === ''
              ? null
              : JSON.parse(_responseText, this.jsonParseReviver);
          result400 = ProblemDetails.fromJS(resultData400);
          return throwException(
            'Bad Request',
            status,
            _responseText,
            _headers,
            result400
          );
        })
      );
    } else if (status === 401) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText: string) => {
          let result401: any = null;
          let resultData401 =
            _responseText === ''
              ? null
              : JSON.parse(_responseText, this.jsonParseReviver);
          result401 = ProblemDetails.fromJS(resultData401);
          return throwException(
            'Unauthorized',
            status,
            _responseText,
            _headers,
            result401
          );
        })
      );
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText: string) => {
          return throwException(
            'An unexpected server error occurred.',
            status,
            _responseText,
            _headers
          );
        })
      );
    }
    return _observableOf(null as any);
  }

  /**
   * @param body (optional)
   * @return Success
   */
  contactsPOST(
    body: AddContactRequest | undefined
  ): Observable<ContactResponse> {
    let url_ = this.baseUrl + '/api/Contacts';
    url_ = url_.replace(/[?&]$/, '');

    const content_ = JSON.stringify(body);

    let options_: any = {
      body: content_,
      observe: 'response',
      responseType: 'blob',
      headers: new HttpHeaders({
        'Content-Type': 'application/json-patch+json',
        Accept: 'text/plain',
      }),
    };

    return this.http
      .request('post', url_, options_)
      .pipe(
        _observableMergeMap((response_: any) => {
          return this.processContactsPOST(response_);
        })
      )
      .pipe(
        _observableCatch((response_: any) => {
          if (response_ instanceof HttpResponseBase) {
            try {
              return this.processContactsPOST(response_ as any);
            } catch (e) {
              return _observableThrow(e) as any as Observable<ContactResponse>;
            }
          } else
            return _observableThrow(
              response_
            ) as any as Observable<ContactResponse>;
        })
      );
  }

  protected processContactsPOST(
    response: HttpResponseBase
  ): Observable<ContactResponse> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse
        ? response.body
        : (response as any).error instanceof Blob
        ? (response as any).error
        : undefined;

    let _headers: any = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 201) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText: string) => {
          let result201: any = null;
          let resultData201 =
            _responseText === ''
              ? null
              : JSON.parse(_responseText, this.jsonParseReviver);
          result201 = ContactResponse.fromJS(resultData201);
          return _observableOf(result201);
        })
      );
    } else if (status === 401) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText: string) => {
          let result401: any = null;
          let resultData401 =
            _responseText === ''
              ? null
              : JSON.parse(_responseText, this.jsonParseReviver);
          result401 = ProblemDetails.fromJS(resultData401);
          return throwException(
            'Unauthorized',
            status,
            _responseText,
            _headers,
            result401
          );
        })
      );
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText: string) => {
          return throwException(
            'An unexpected server error occurred.',
            status,
            _responseText,
            _headers
          );
        })
      );
    }
    return _observableOf(null as any);
  }
}

@Injectable()
export class TravelplansClient {
  private http: HttpClient;
  private baseUrl: string;
  protected jsonParseReviver: ((key: string, value: any) => any) | undefined =
    undefined;

  constructor(
    @Inject(HttpClient) http: HttpClient,
    @Optional() @Inject(API_BASE_URL) baseUrl?: string
  ) {
    this.http = http;
    this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : '';
  }

  /**
   * @param body (optional)
   * @return Success
   */
  calculateTravelplan(
    body: CalculateTravelplanRequest | undefined
  ): Observable<RouteRegistrationResponse[]> {
    let url_ = this.baseUrl + '/api/Travelplans';
    url_ = url_.replace(/[?&]$/, '');

    const content_ = JSON.stringify(body);

    let options_: any = {
      body: content_,
      observe: 'response',
      responseType: 'blob',
      headers: new HttpHeaders({
        'Content-Type': 'application/json-patch+json',
        Accept: 'text/plain',
      }),
    };

    return this.http
      .request('post', url_, options_)
      .pipe(
        _observableMergeMap((response_: any) => {
          return this.processCalculateTravelplan(response_);
        })
      )
      .pipe(
        _observableCatch((response_: any) => {
          if (response_ instanceof HttpResponseBase) {
            try {
              return this.processCalculateTravelplan(response_ as any);
            } catch (e) {
              return _observableThrow(e) as any as Observable<
                RouteRegistrationResponse[]
              >;
            }
          } else
            return _observableThrow(response_) as any as Observable<
              RouteRegistrationResponse[]
            >;
        })
      );
  }

  protected processCalculateTravelplan(
    response: HttpResponseBase
  ): Observable<RouteRegistrationResponse[]> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse
        ? response.body
        : (response as any).error instanceof Blob
        ? (response as any).error
        : undefined;

    let _headers: any = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 401) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText: string) => {
          let result401: any = null;
          let resultData401 =
            _responseText === ''
              ? null
              : JSON.parse(_responseText, this.jsonParseReviver);
          result401 = ProblemDetails.fromJS(resultData401);
          return throwException(
            'Unauthorized',
            status,
            _responseText,
            _headers,
            result401
          );
        })
      );
    } else if (status === 200) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText: string) => {
          let result200: any = null;
          let resultData200 =
            _responseText === ''
              ? null
              : JSON.parse(_responseText, this.jsonParseReviver);
          if (Array.isArray(resultData200)) {
            result200 = [] as any;
            for (let item of resultData200)
              result200!.push(RouteRegistrationResponse.fromJS(item));
          } else {
            result200 = <any>null;
          }
          return _observableOf(result200);
        })
      );
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText: string) => {
          return throwException(
            'An unexpected server error occurred.',
            status,
            _responseText,
            _headers
          );
        })
      );
    }
    return _observableOf(null as any);
  }

  /**
   * @return Success
   */
  getUserTravelplans(): Observable<UserTravelplanResponse> {
    let url_ = this.baseUrl + '/api/Travelplans';
    url_ = url_.replace(/[?&]$/, '');

    let options_: any = {
      observe: 'response',
      responseType: 'blob',
      headers: new HttpHeaders({
        Accept: 'text/plain',
      }),
    };

    return this.http
      .request('get', url_, options_)
      .pipe(
        _observableMergeMap((response_: any) => {
          return this.processGetUserTravelplans(response_);
        })
      )
      .pipe(
        _observableCatch((response_: any) => {
          if (response_ instanceof HttpResponseBase) {
            try {
              return this.processGetUserTravelplans(response_ as any);
            } catch (e) {
              return _observableThrow(
                e
              ) as any as Observable<UserTravelplanResponse>;
            }
          } else
            return _observableThrow(
              response_
            ) as any as Observable<UserTravelplanResponse>;
        })
      );
  }

  protected processGetUserTravelplans(
    response: HttpResponseBase
  ): Observable<UserTravelplanResponse> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse
        ? response.body
        : (response as any).error instanceof Blob
        ? (response as any).error
        : undefined;

    let _headers: any = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 401) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText: string) => {
          let result401: any = null;
          let resultData401 =
            _responseText === ''
              ? null
              : JSON.parse(_responseText, this.jsonParseReviver);
          result401 = ProblemDetails.fromJS(resultData401);
          return throwException(
            'Unauthorized',
            status,
            _responseText,
            _headers,
            result401
          );
        })
      );
    } else if (status === 200) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText: string) => {
          let result200: any = null;
          let resultData200 =
            _responseText === ''
              ? null
              : JSON.parse(_responseText, this.jsonParseReviver);
          result200 = UserTravelplanResponse.fromJS(resultData200);
          return _observableOf(result200);
        })
      );
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText: string) => {
          return throwException(
            'An unexpected server error occurred.',
            status,
            _responseText,
            _headers
          );
        })
      );
    }
    return _observableOf(null as any);
  }

  /**
   * @param travelplanId (optional)
   * @return Success
   */
  deleteTravelplan(travelplanId: string | undefined): Observable<void> {
    let url_ = this.baseUrl + '/api/Travelplans?';
    if (travelplanId === null)
      throw new Error("The parameter 'travelplanId' cannot be null.");
    else if (travelplanId !== undefined)
      url_ += 'travelplanId=' + encodeURIComponent('' + travelplanId) + '&';
    url_ = url_.replace(/[?&]$/, '');

    let options_: any = {
      observe: 'response',
      responseType: 'blob',
      headers: new HttpHeaders({}),
    };

    return this.http
      .request('delete', url_, options_)
      .pipe(
        _observableMergeMap((response_: any) => {
          return this.processDeleteTravelplan(response_);
        })
      )
      .pipe(
        _observableCatch((response_: any) => {
          if (response_ instanceof HttpResponseBase) {
            try {
              return this.processDeleteTravelplan(response_ as any);
            } catch (e) {
              return _observableThrow(e) as any as Observable<void>;
            }
          } else return _observableThrow(response_) as any as Observable<void>;
        })
      );
  }

  protected processDeleteTravelplan(
    response: HttpResponseBase
  ): Observable<void> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse
        ? response.body
        : (response as any).error instanceof Blob
        ? (response as any).error
        : undefined;

    let _headers: any = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 401) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText: string) => {
          let result401: any = null;
          let resultData401 =
            _responseText === ''
              ? null
              : JSON.parse(_responseText, this.jsonParseReviver);
          result401 = ProblemDetails.fromJS(resultData401);
          return throwException(
            'Unauthorized',
            status,
            _responseText,
            _headers,
            result401
          );
        })
      );
    } else if (status === 204) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText: string) => {
          return _observableOf(null as any);
        })
      );
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText: string) => {
          return throwException(
            'An unexpected server error occurred.',
            status,
            _responseText,
            _headers
          );
        })
      );
    }
    return _observableOf(null as any);
  }

  /**
   * @return Success
   */
  download(monthNumber: number): Observable<FileResponse> {
    let url_ = this.baseUrl + '/api/Travelplans/download/{monthNumber}';
    if (monthNumber === undefined || monthNumber === null)
      throw new Error("The parameter 'monthNumber' must be defined.");
    url_ = url_.replace('{monthNumber}', encodeURIComponent('' + monthNumber));
    url_ = url_.replace(/[?&]$/, '');

    let options_: any = {
      observe: 'response',
      responseType: 'blob',
      headers: new HttpHeaders({
        Accept: 'application/octet-stream',
      }),
    };

    return this.http
      .request('get', url_, options_)
      .pipe(
        _observableMergeMap((response_: any) => {
          return this.processDownload(response_);
        })
      )
      .pipe(
        _observableCatch((response_: any) => {
          if (response_ instanceof HttpResponseBase) {
            try {
              return this.processDownload(response_ as any);
            } catch (e) {
              return _observableThrow(e) as any as Observable<FileResponse>;
            }
          } else
            return _observableThrow(
              response_
            ) as any as Observable<FileResponse>;
        })
      );
  }

  protected processDownload(
    response: HttpResponseBase
  ): Observable<FileResponse> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse
        ? response.body
        : (response as any).error instanceof Blob
        ? (response as any).error
        : undefined;

    let _headers: any = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200 || status === 206) {
      const contentDisposition = response.headers
        ? response.headers.get('content-disposition')
        : undefined;
      const fileNameMatch = contentDisposition
        ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition)
        : undefined;
      const fileName =
        fileNameMatch && fileNameMatch.length > 1
          ? fileNameMatch[1]
          : undefined;
      return _observableOf({
        fileName: fileName,
        data: responseBlob as any,
        status: status,
        headers: _headers,
      });
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText: string) => {
          return throwException(
            'An unexpected server error occurred.',
            status,
            _responseText,
            _headers
          );
        })
      );
    }
    return _observableOf(null as any);
  }

  /**
   * @param body (optional)
   * @return Success
   */
  save(body: PersistTravelplanRequest | undefined): Observable<void> {
    let url_ = this.baseUrl + '/api/Travelplans/save';
    url_ = url_.replace(/[?&]$/, '');

    const content_ = JSON.stringify(body);

    let options_: any = {
      body: content_,
      observe: 'response',
      responseType: 'blob',
      headers: new HttpHeaders({
        'Content-Type': 'application/json-patch+json',
      }),
    };

    return this.http
      .request('post', url_, options_)
      .pipe(
        _observableMergeMap((response_: any) => {
          return this.processSave(response_);
        })
      )
      .pipe(
        _observableCatch((response_: any) => {
          if (response_ instanceof HttpResponseBase) {
            try {
              return this.processSave(response_ as any);
            } catch (e) {
              return _observableThrow(e) as any as Observable<void>;
            }
          } else return _observableThrow(response_) as any as Observable<void>;
        })
      );
  }

  protected processSave(response: HttpResponseBase): Observable<void> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse
        ? response.body
        : (response as any).error instanceof Blob
        ? (response as any).error
        : undefined;

    let _headers: any = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 401) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText: string) => {
          let result401: any = null;
          let resultData401 =
            _responseText === ''
              ? null
              : JSON.parse(_responseText, this.jsonParseReviver);
          result401 = ProblemDetails.fromJS(resultData401);
          return throwException(
            'Unauthorized',
            status,
            _responseText,
            _headers,
            result401
          );
        })
      );
    } else if (status === 204) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText: string) => {
          return _observableOf(null as any);
        })
      );
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText: string) => {
          return throwException(
            'An unexpected server error occurred.',
            status,
            _responseText,
            _headers
          );
        })
      );
    }
    return _observableOf(null as any);
  }
}

export class AddContactRequest implements IAddContactRequest {
  firstName!: string;
  lastName!: string;
  postalCode!: string;
  street!: string;
  houseNumber!: number;
  houseNumberAddition?: string | undefined;
  city!: string;

  constructor(data?: IAddContactRequest) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.firstName = _data['firstName'];
      this.lastName = _data['lastName'];
      this.postalCode = _data['postalCode'];
      this.street = _data['street'];
      this.houseNumber = _data['houseNumber'];
      this.houseNumberAddition = _data['houseNumberAddition'];
      this.city = _data['city'];
    }
  }

  static fromJS(data: any): AddContactRequest {
    data = typeof data === 'object' ? data : {};
    let result = new AddContactRequest();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['firstName'] = this.firstName;
    data['lastName'] = this.lastName;
    data['postalCode'] = this.postalCode;
    data['street'] = this.street;
    data['houseNumber'] = this.houseNumber;
    data['houseNumberAddition'] = this.houseNumberAddition;
    data['city'] = this.city;
    return data;
  }
}

export interface IAddContactRequest {
  firstName: string;
  lastName: string;
  postalCode: string;
  street: string;
  houseNumber: number;
  houseNumberAddition?: string | undefined;
  city: string;
}

export class Address implements IAddress {
  contactId?: string;
  postalCode?: string | undefined;
  street?: string | undefined;
  houseNumber?: number;
  houseNumberAddition?: string | undefined;
  city?: string | undefined;

  constructor(data?: IAddress) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.contactId = _data['contactId'];
      this.postalCode = _data['postalCode'];
      this.street = _data['street'];
      this.houseNumber = _data['houseNumber'];
      this.houseNumberAddition = _data['houseNumberAddition'];
      this.city = _data['city'];
    }
  }

  static fromJS(data: any): Address {
    data = typeof data === 'object' ? data : {};
    let result = new Address();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['contactId'] = this.contactId;
    data['postalCode'] = this.postalCode;
    data['street'] = this.street;
    data['houseNumber'] = this.houseNumber;
    data['houseNumberAddition'] = this.houseNumberAddition;
    data['city'] = this.city;
    return data;
  }
}

export interface IAddress {
  contactId?: string;
  postalCode?: string | undefined;
  street?: string | undefined;
  houseNumber?: number;
  houseNumberAddition?: string | undefined;
  city?: string | undefined;
}

export class AuthenticationRequest implements IAuthenticationRequest {
  email?: string | undefined;
  password!: string;

  constructor(data?: IAuthenticationRequest) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.email = _data['email'];
      this.password = _data['password'];
    }
  }

  static fromJS(data: any): AuthenticationRequest {
    data = typeof data === 'object' ? data : {};
    let result = new AuthenticationRequest();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['email'] = this.email;
    data['password'] = this.password;
    return data;
  }
}

export interface IAuthenticationRequest {
  email?: string | undefined;
  password: string;
}

export class CalculateTravelplanRequest implements ICalculateTravelplanRequest {
  waypoints?: WayPointsRequest[] | undefined;

  constructor(data?: ICalculateTravelplanRequest) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      if (Array.isArray(_data['waypoints'])) {
        this.waypoints = [] as any;
        for (let item of _data['waypoints'])
          this.waypoints!.push(WayPointsRequest.fromJS(item));
      }
    }
  }

  static fromJS(data: any): CalculateTravelplanRequest {
    data = typeof data === 'object' ? data : {};
    let result = new CalculateTravelplanRequest();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    if (Array.isArray(this.waypoints)) {
      data['waypoints'] = [];
      for (let item of this.waypoints) data['waypoints'].push(item.toJSON());
    }
    return data;
  }
}

export interface ICalculateTravelplanRequest {
  waypoints?: WayPointsRequest[] | undefined;
}

export class ContactResponse implements IContactResponse {
  id?: string;
  firstName?: string | undefined;
  lastName?: string | undefined;
  address?: Address;

  constructor(data?: IContactResponse) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.id = _data['id'];
      this.firstName = _data['firstName'];
      this.lastName = _data['lastName'];
      this.address = _data['address']
        ? Address.fromJS(_data['address'])
        : <any>undefined;
    }
  }

  static fromJS(data: any): ContactResponse {
    data = typeof data === 'object' ? data : {};
    let result = new ContactResponse();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['id'] = this.id;
    data['firstName'] = this.firstName;
    data['lastName'] = this.lastName;
    data['address'] = this.address ? this.address.toJSON() : <any>undefined;
    return data;
  }
}

export interface IContactResponse {
  id?: string;
  firstName?: string | undefined;
  lastName?: string | undefined;
  address?: Address;
}

export class NavigationAddress implements INavigationAddress {
  contactId?: string;
  postalCode?: string | undefined;
  street?: string | undefined;
  houseNumber?: number;
  houseNumberAddition?: string | undefined;
  city?: string | undefined;

  constructor(data?: INavigationAddress) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.contactId = _data['contactId'];
      this.postalCode = _data['postalCode'];
      this.street = _data['street'];
      this.houseNumber = _data['houseNumber'];
      this.houseNumberAddition = _data['houseNumberAddition'];
      this.city = _data['city'];
    }
  }

  static fromJS(data: any): NavigationAddress {
    data = typeof data === 'object' ? data : {};
    let result = new NavigationAddress();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['contactId'] = this.contactId;
    data['postalCode'] = this.postalCode;
    data['street'] = this.street;
    data['houseNumber'] = this.houseNumber;
    data['houseNumberAddition'] = this.houseNumberAddition;
    data['city'] = this.city;
    return data;
  }
}

export interface INavigationAddress {
  contactId?: string;
  postalCode?: string | undefined;
  street?: string | undefined;
  houseNumber?: number;
  houseNumberAddition?: string | undefined;
  city?: string | undefined;
}

export class PersistTravelplanRequest implements IPersistTravelplanRequest {
  name?: string | undefined;
  registrationDate?: Date;
  routes?: RouteRegistrationRequest[] | undefined;

  constructor(data?: IPersistTravelplanRequest) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.name = _data['name'];
      this.registrationDate = _data['registrationDate']
        ? new Date(_data['registrationDate'].toString())
        : <any>undefined;
      if (Array.isArray(_data['routes'])) {
        this.routes = [] as any;
        for (let item of _data['routes'])
          this.routes!.push(RouteRegistrationRequest.fromJS(item));
      }
    }
  }

  static fromJS(data: any): PersistTravelplanRequest {
    data = typeof data === 'object' ? data : {};
    let result = new PersistTravelplanRequest();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['name'] = this.name;
    data['registrationDate'] = this.registrationDate
      ? this.registrationDate.toISOString()
      : <any>undefined;
    if (Array.isArray(this.routes)) {
      data['routes'] = [];
      for (let item of this.routes) data['routes'].push(item.toJSON());
    }
    return data;
  }
}

export interface IPersistTravelplanRequest {
  name?: string | undefined;
  registrationDate?: Date;
  routes?: RouteRegistrationRequest[] | undefined;
}

export class ProblemDetails implements IProblemDetails {
  type?: string | undefined;
  title?: string | undefined;
  status?: number | undefined;
  detail?: string | undefined;
  instance?: string | undefined;

  constructor(data?: IProblemDetails) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.type = _data['type'];
      this.title = _data['title'];
      this.status = _data['status'];
      this.detail = _data['detail'];
      this.instance = _data['instance'];
    }
  }

  static fromJS(data: any): ProblemDetails {
    data = typeof data === 'object' ? data : {};
    let result = new ProblemDetails();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['type'] = this.type;
    data['title'] = this.title;
    data['status'] = this.status;
    data['detail'] = this.detail;
    data['instance'] = this.instance;
    return data;
  }
}

export interface IProblemDetails {
  type?: string | undefined;
  title?: string | undefined;
  status?: number | undefined;
  detail?: string | undefined;
  instance?: string | undefined;
}

export class RegisterRequest implements IRegisterRequest {
  email?: string | undefined;
  password!: string;
  name!: string;

  constructor(data?: IRegisterRequest) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.email = _data['email'];
      this.password = _data['password'];
      this.name = _data['name'];
    }
  }

  static fromJS(data: any): RegisterRequest {
    data = typeof data === 'object' ? data : {};
    let result = new RegisterRequest();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['email'] = this.email;
    data['password'] = this.password;
    data['name'] = this.name;
    return data;
  }
}

export interface IRegisterRequest {
  email?: string | undefined;
  password: string;
  name: string;
}

export class RouteRegistrationRequest implements IRouteRegistrationRequest {
  origin?: NavigationAddress;
  destination?: NavigationAddress;
  distance?: number;

  constructor(data?: IRouteRegistrationRequest) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.origin = _data['origin']
        ? NavigationAddress.fromJS(_data['origin'])
        : <any>undefined;
      this.destination = _data['destination']
        ? NavigationAddress.fromJS(_data['destination'])
        : <any>undefined;
      this.distance = _data['distance'];
    }
  }

  static fromJS(data: any): RouteRegistrationRequest {
    data = typeof data === 'object' ? data : {};
    let result = new RouteRegistrationRequest();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['origin'] = this.origin ? this.origin.toJSON() : <any>undefined;
    data['destination'] = this.destination
      ? this.destination.toJSON()
      : <any>undefined;
    data['distance'] = this.distance;
    return data;
  }
}

export interface IRouteRegistrationRequest {
  origin?: NavigationAddress;
  destination?: NavigationAddress;
  distance?: number;
}

export class RouteRegistrationResponse implements IRouteRegistrationResponse {
  origin?: NavigationAddress;
  destination?: NavigationAddress;
  distance?: number;

  constructor(data?: IRouteRegistrationResponse) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.origin = _data['origin']
        ? NavigationAddress.fromJS(_data['origin'])
        : <any>undefined;
      this.destination = _data['destination']
        ? NavigationAddress.fromJS(_data['destination'])
        : <any>undefined;
      this.distance = _data['distance'];
    }
  }

  static fromJS(data: any): RouteRegistrationResponse {
    data = typeof data === 'object' ? data : {};
    let result = new RouteRegistrationResponse();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['origin'] = this.origin ? this.origin.toJSON() : <any>undefined;
    data['destination'] = this.destination
      ? this.destination.toJSON()
      : <any>undefined;
    data['distance'] = this.distance;
    return data;
  }
}

export interface IRouteRegistrationResponse {
  origin?: NavigationAddress;
  destination?: NavigationAddress;
  distance?: number;
}

export class TravelplanResponse implements ITravelplanResponse {
  id?: string;
  registrationDate?: Date;
  routes?: RouteRegistrationResponse[] | undefined;

  constructor(data?: ITravelplanResponse) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.id = _data['id'];
      this.registrationDate = _data['registrationDate']
        ? new Date(_data['registrationDate'].toString())
        : <any>undefined;
      if (Array.isArray(_data['routes'])) {
        this.routes = [] as any;
        for (let item of _data['routes'])
          this.routes!.push(RouteRegistrationResponse.fromJS(item));
      }
    }
  }

  static fromJS(data: any): TravelplanResponse {
    data = typeof data === 'object' ? data : {};
    let result = new TravelplanResponse();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['id'] = this.id;
    data['registrationDate'] = this.registrationDate
      ? this.registrationDate.toISOString()
      : <any>undefined;
    if (Array.isArray(this.routes)) {
      data['routes'] = [];
      for (let item of this.routes) data['routes'].push(item.toJSON());
    }
    return data;
  }
}

export interface ITravelplanResponse {
  id?: string;
  registrationDate?: Date;
  routes?: RouteRegistrationResponse[] | undefined;
}

export class UserTravelplanResponse implements IUserTravelplanResponse {
  travelPlans?: TravelplanResponse[] | undefined;

  constructor(data?: IUserTravelplanResponse) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      if (Array.isArray(_data['travelPlans'])) {
        this.travelPlans = [] as any;
        for (let item of _data['travelPlans'])
          this.travelPlans!.push(TravelplanResponse.fromJS(item));
      }
    }
  }

  static fromJS(data: any): UserTravelplanResponse {
    data = typeof data === 'object' ? data : {};
    let result = new UserTravelplanResponse();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    if (Array.isArray(this.travelPlans)) {
      data['travelPlans'] = [];
      for (let item of this.travelPlans)
        data['travelPlans'].push(item.toJSON());
    }
    return data;
  }
}

export interface IUserTravelplanResponse {
  travelPlans?: TravelplanResponse[] | undefined;
}

export class WayPointsRequest implements IWayPointsRequest {
  originContactId?: string;
  destinationContactId?: string;

  constructor(data?: IWayPointsRequest) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.originContactId = _data['originContactId'];
      this.destinationContactId = _data['destinationContactId'];
    }
  }

  static fromJS(data: any): WayPointsRequest {
    data = typeof data === 'object' ? data : {};
    let result = new WayPointsRequest();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['originContactId'] = this.originContactId;
    data['destinationContactId'] = this.destinationContactId;
    return data;
  }
}

export interface IWayPointsRequest {
  originContactId?: string;
  destinationContactId?: string;
}

export interface FileResponse {
  data: Blob;
  status: number;
  fileName?: string;
  headers?: { [name: string]: any };
}

export class ApiException extends Error {
  override message: string;
  status: number;
  response: string;
  headers: { [key: string]: any };
  result: any;

  constructor(
    message: string,
    status: number,
    response: string,
    headers: { [key: string]: any },
    result: any
  ) {
    super();

    this.message = message;
    this.status = status;
    this.response = response;
    this.headers = headers;
    this.result = result;
  }

  protected isApiException = true;

  static isApiException(obj: any): obj is ApiException {
    return obj.isApiException === true;
  }
}

function throwException(
  message: string,
  status: number,
  response: string,
  headers: { [key: string]: any },
  result?: any
): Observable<any> {
  return _observableThrow(
    new ApiException(message, status, response, headers, result)
  );
}

function blobToText(blob: any): Observable<string> {
  return new Observable<string>((observer: any) => {
    if (!blob) {
      observer.next('');
      observer.complete();
    } else {
      let reader = new FileReader();
      reader.onload = (event) => {
        observer.next((event.target as any).result);
        observer.complete();
      };
      reader.readAsText(blob);
    }
  });
}
